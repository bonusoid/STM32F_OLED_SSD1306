
STM32F_OLED_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d50  08002d50  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002d50  08002d50  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d50  08002d50  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000028  08002d80  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002d80  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077b9  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b1  00000000  00000000  00027809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  000290c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e82a  00000000  00000000  00029e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009915  00000000  00000000  00038692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054b18  00000000  00000000  00041fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00096abf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001860  00000000  00000000  00096b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029c0 	.word	0x080029c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	080029c0 	.word	0x080029c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f001 f818 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f898 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8ee 	bl	800040c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 fef0 	bl	8001014 <MX_I2C1_Init>
  //Up to 2 OLED. If only 1 OLED is connected, use one of : OLED1 or OLED2
  ssd1306_init(OLED1);
 8000234:	203c      	movs	r0, #60	; 0x3c
 8000236:	f000 fbd8 	bl	80009ea <ssd1306_init>
  ssd1306_init(OLED2);
 800023a:	203d      	movs	r0, #61	; 0x3d
 800023c:	f000 fbd5 	bl	80009ea <ssd1306_init>
  /* USER CODE BEGIN 2 */
  OLED_clear(OLED1);
 8000240:	203c      	movs	r0, #60	; 0x3c
 8000242:	f000 fe71 	bl	8000f28 <OLED_clear>
  OLED_clear(OLED2);
 8000246:	203d      	movs	r0, #61	; 0x3d
 8000248:	f000 fe6e 	bl	8000f28 <OLED_clear>

  drawLoadingBar(OLED1);
 800024c:	203c      	movs	r0, #60	; 0x3c
 800024e:	f000 fb91 	bl	8000974 <drawLoadingBar>
  drawLoadingBar(OLED2);
 8000252:	203d      	movs	r0, #61	; 0x3d
 8000254:	f000 fb8e 	bl	8000974 <drawLoadingBar>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	    drawBytes(OLED1);
 8000258:	203c      	movs	r0, #60	; 0x3c
 800025a:	f000 fb13 	bl	8000884 <drawBytes>
	  		HAL_Delay(1000);
 800025e:	23fa      	movs	r3, #250	; 0xfa
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f85c 	bl	8001320 <HAL_Delay>
	        OLED_clearblock(OLED1,3,5,114); //Finish column = 5 + 11*10 - 1
 8000268:	2372      	movs	r3, #114	; 0x72
 800026a:	2205      	movs	r2, #5
 800026c:	2103      	movs	r1, #3
 800026e:	203c      	movs	r0, #60	; 0x3c
 8000270:	f000 fe75 	bl	8000f5e <OLED_clearblock>
	     	HAL_Delay(500);
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	0018      	movs	r0, r3
 800027a:	f001 f851 	bl	8001320 <HAL_Delay>
	  		OLED_clearblock(OLED1,5,3,114); //Finish column = 3 + 8*14 - 1
 800027e:	2372      	movs	r3, #114	; 0x72
 8000280:	2203      	movs	r2, #3
 8000282:	2105      	movs	r1, #5
 8000284:	203c      	movs	r0, #60	; 0x3c
 8000286:	f000 fe6a 	bl	8000f5e <OLED_clearblock>
	     	HAL_Delay(500);
 800028a:	23fa      	movs	r3, #250	; 0xfa
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f001 f846 	bl	8001320 <HAL_Delay>

	  		drawInt(OLED2);
 8000294:	203d      	movs	r0, #61	; 0x3d
 8000296:	f000 f8d1 	bl	800043c <drawInt>
	  		HAL_Delay(1000);
 800029a:	23fa      	movs	r3, #250	; 0xfa
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 f83e 	bl	8001320 <HAL_Delay>
	  		OLED_clear(OLED2);
 80002a4:	203d      	movs	r0, #61	; 0x3d
 80002a6:	f000 fe3f 	bl	8000f28 <OLED_clear>

	  		drawAlphanum(OLED1);
 80002aa:	203c      	movs	r0, #60	; 0x3c
 80002ac:	f000 f914 	bl	80004d8 <drawAlphanum>
	  		HAL_Delay(1000);
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 f833 	bl	8001320 <HAL_Delay>
	  		OLED_reverse(OLED1);
 80002ba:	203c      	movs	r0, #60	; 0x3c
 80002bc:	f000 fe99 	bl	8000ff2 <OLED_reverse>
	  		HAL_Delay(1000);
 80002c0:	23fa      	movs	r3, #250	; 0xfa
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 f82b 	bl	8001320 <HAL_Delay>
	  		OLED_clear(OLED1);
 80002ca:	203c      	movs	r0, #60	; 0x3c
 80002cc:	f000 fe2c 	bl	8000f28 <OLED_clear>
	  		OLED_normal(OLED1);
 80002d0:	203c      	movs	r0, #60	; 0x3c
 80002d2:	f000 fe7e 	bl	8000fd2 <OLED_normal>

	  		drawPunct(OLED2);
 80002d6:	203d      	movs	r0, #61	; 0x3d
 80002d8:	f000 f93e 	bl	8000558 <drawPunct>
	  		HAL_Delay(1000);
 80002dc:	23fa      	movs	r3, #250	; 0xfa
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 f81d 	bl	8001320 <HAL_Delay>
	  		OLED_reverse(OLED2);
 80002e6:	203d      	movs	r0, #61	; 0x3d
 80002e8:	f000 fe83 	bl	8000ff2 <OLED_reverse>
	  		HAL_Delay(1000);
 80002ec:	23fa      	movs	r3, #250	; 0xfa
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 f815 	bl	8001320 <HAL_Delay>
	  		OLED_clear(OLED2);
 80002f6:	203d      	movs	r0, #61	; 0x3d
 80002f8:	f000 fe16 	bl	8000f28 <OLED_clear>
	  		OLED_normal(OLED2);
 80002fc:	203d      	movs	r0, #61	; 0x3d
 80002fe:	f000 fe68 	bl	8000fd2 <OLED_normal>

	  		drawFrame(OLED1);
 8000302:	203c      	movs	r0, #60	; 0x3c
 8000304:	f000 f956 	bl	80005b4 <drawFrame>
	  		HAL_Delay(700);
 8000308:	23af      	movs	r3, #175	; 0xaf
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f807 	bl	8001320 <HAL_Delay>
	  		OLED_clearblock(OLED1,3,36,43); //Finish column = 36 + 8 - 1
 8000312:	232b      	movs	r3, #43	; 0x2b
 8000314:	2224      	movs	r2, #36	; 0x24
 8000316:	2103      	movs	r1, #3
 8000318:	203c      	movs	r0, #60	; 0x3c
 800031a:	f000 fe20 	bl	8000f5e <OLED_clearblock>
	  		HAL_Delay(700);
 800031e:	23af      	movs	r3, #175	; 0xaf
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	0018      	movs	r0, r3
 8000324:	f000 fffc 	bl	8001320 <HAL_Delay>
	  		OLED_clear(OLED1);
 8000328:	203c      	movs	r0, #60	; 0x3c
 800032a:	f000 fdfd 	bl	8000f28 <OLED_clear>

	  		drawArrow(OLED2);
 800032e:	203d      	movs	r0, #61	; 0x3d
 8000330:	f000 fa34 	bl	800079c <drawArrow>
	  		HAL_Delay(700);
 8000334:	23af      	movs	r3, #175	; 0xaf
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fff1 	bl	8001320 <HAL_Delay>
	  		OLED_clearblock(OLED2,3,36,43); //Finish column = 36 + 8 - 1
 800033e:	232b      	movs	r3, #43	; 0x2b
 8000340:	2224      	movs	r2, #36	; 0x24
 8000342:	2103      	movs	r1, #3
 8000344:	203d      	movs	r0, #61	; 0x3d
 8000346:	f000 fe0a 	bl	8000f5e <OLED_clearblock>
	  		HAL_Delay(700);
 800034a:	23af      	movs	r3, #175	; 0xaf
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	0018      	movs	r0, r3
 8000350:	f000 ffe6 	bl	8001320 <HAL_Delay>
	  		OLED_clear(OLED2);
 8000354:	203d      	movs	r0, #61	; 0x3d
 8000356:	f000 fde7 	bl	8000f28 <OLED_clear>
	  	    drawBytes(OLED1);
 800035a:	e77d      	b.n	8000258 <main+0x38>

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b095      	sub	sp, #84	; 0x54
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	2420      	movs	r4, #32
 8000364:	193b      	adds	r3, r7, r4
 8000366:	0018      	movs	r0, r3
 8000368:	2330      	movs	r3, #48	; 0x30
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fb1f 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000372:	2310      	movs	r3, #16
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2310      	movs	r3, #16
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 fb17 	bl	80029b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	2310      	movs	r3, #16
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 fb10 	bl	80029b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2202      	movs	r2, #2
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2210      	movs	r2, #16
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 fdc1 	bl	8001f34 <HAL_RCC_OscConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003b6:	f000 fb13 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	2110      	movs	r1, #16
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2207      	movs	r2, #7
 80003c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2100      	movs	r1, #0
 80003d8:	0018      	movs	r0, r3
 80003da:	f002 f8c5 	bl	8002568 <HAL_RCC_ClockConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003e2:	f000 fafd 	bl	80009e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003e6:	003b      	movs	r3, r7
 80003e8:	2220      	movs	r2, #32
 80003ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f2:	003b      	movs	r3, r7
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 f9e9 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003fe:	f000 faef 	bl	80009e0 <Error_Handler>
  }
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b015      	add	sp, #84	; 0x54
 8000408:	bd90      	pop	{r4, r7, pc}
	...

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_GPIO_Init+0x2c>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_GPIO_Init+0x2c>)
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	02c9      	lsls	r1, r1, #11
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <MX_GPIO_Init+0x2c>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	02db      	lsls	r3, r3, #11
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021000 	.word	0x40021000

0800043c <drawInt>:

/* USER CODE BEGIN 4 */
void drawInt(unsigned char olednum)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	0002      	movs	r2, r0
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	701a      	strb	r2, [r3, #0]
	OLED_drawint(olednum, 64, 0, 8); //Decimal
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	7818      	ldrb	r0, [r3, #0]
 800044c:	2308      	movs	r3, #8
 800044e:	2200      	movs	r2, #0
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	f000 fcff 	bl	8000e54 <OLED_drawint>
	OLED_drawint(olednum, 064, 0, 48); //Octal displayed as Decimal
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	7818      	ldrb	r0, [r3, #0]
 800045a:	2330      	movs	r3, #48	; 0x30
 800045c:	2200      	movs	r2, #0
 800045e:	2134      	movs	r1, #52	; 0x34
 8000460:	f000 fcf8 	bl	8000e54 <OLED_drawint>
	OLED_drawint(olednum, 0x64, 0, 88); //Hexadecimal displayed as Decimal
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	7818      	ldrb	r0, [r3, #0]
 8000468:	2358      	movs	r3, #88	; 0x58
 800046a:	2200      	movs	r2, #0
 800046c:	2164      	movs	r1, #100	; 0x64
 800046e:	f000 fcf1 	bl	8000e54 <OLED_drawint>

	OLED_drawint(olednum, -64, 1, 8); //Negative number is not supported
 8000472:	2340      	movs	r3, #64	; 0x40
 8000474:	4259      	negs	r1, r3
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	7818      	ldrb	r0, [r3, #0]
 800047a:	2308      	movs	r3, #8
 800047c:	2201      	movs	r2, #1
 800047e:	f000 fce9 	bl	8000e54 <OLED_drawint>
				 	 	 	 	 	  //Its 2's complement will be displayed

	OLED_drawint(olednum, 4294967295, 3, 8); //Max. is 4294967295
 8000482:	2301      	movs	r3, #1
 8000484:	4259      	negs	r1, r3
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	7818      	ldrb	r0, [r3, #0]
 800048a:	2308      	movs	r3, #8
 800048c:	2203      	movs	r2, #3
 800048e:	f000 fce1 	bl	8000e54 <OLED_drawint>

	OLED_drawint(olednum, 100, 5, 8);
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	7818      	ldrb	r0, [r3, #0]
 8000496:	2308      	movs	r3, #8
 8000498:	2205      	movs	r2, #5
 800049a:	2164      	movs	r1, #100	; 0x64
 800049c:	f000 fcda 	bl	8000e54 <OLED_drawint>
	OLED_drawchar(olednum, SYM_DEGREE, 5, 32);
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	7818      	ldrb	r0, [r3, #0]
 80004a4:	2320      	movs	r3, #32
 80004a6:	2205      	movs	r2, #5
 80004a8:	217f      	movs	r1, #127	; 0x7f
 80004aa:	f000 fc11 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, 'C', 5, 40);
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	7818      	ldrb	r0, [r3, #0]
 80004b2:	2328      	movs	r3, #40	; 0x28
 80004b4:	2205      	movs	r2, #5
 80004b6:	2143      	movs	r1, #67	; 0x43
 80004b8:	f000 fc0a 	bl	8000cd0 <OLED_drawchar>

	OLED_drawtext(olednum, " OLED TEST : INT",7,0);
 80004bc:	4905      	ldr	r1, [pc, #20]	; (80004d4 <drawInt+0x98>)
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	7818      	ldrb	r0, [r3, #0]
 80004c2:	2300      	movs	r3, #0
 80004c4:	2207      	movs	r2, #7
 80004c6:	f000 fc91 	bl	8000dec <OLED_drawtext>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	080029d8 	.word	0x080029d8

080004d8 <drawAlphanum>:

void drawAlphanum(unsigned char olednum)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	0002      	movs	r2, r0
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	701a      	strb	r2, [r3, #0]
	OLED_drawtext(olednum, "ABCDEFGHIJKLM",0,0);
 80004e4:	4916      	ldr	r1, [pc, #88]	; (8000540 <drawAlphanum+0x68>)
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	7818      	ldrb	r0, [r3, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2200      	movs	r2, #0
 80004ee:	f000 fc7d 	bl	8000dec <OLED_drawtext>
	OLED_drawtext(olednum, "NOPQRSTUVWXYZ",1,0);
 80004f2:	4914      	ldr	r1, [pc, #80]	; (8000544 <drawAlphanum+0x6c>)
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	7818      	ldrb	r0, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	2201      	movs	r2, #1
 80004fc:	f000 fc76 	bl	8000dec <OLED_drawtext>

	OLED_drawtext(olednum, "abcdefghijklm",3,0);
 8000500:	4911      	ldr	r1, [pc, #68]	; (8000548 <drawAlphanum+0x70>)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2203      	movs	r2, #3
 800050a:	f000 fc6f 	bl	8000dec <OLED_drawtext>
	OLED_drawtext(olednum, "nopqrstuvwxyz",4,0);
 800050e:	490f      	ldr	r1, [pc, #60]	; (800054c <drawAlphanum+0x74>)
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	7818      	ldrb	r0, [r3, #0]
 8000514:	2300      	movs	r3, #0
 8000516:	2204      	movs	r2, #4
 8000518:	f000 fc68 	bl	8000dec <OLED_drawtext>

	OLED_drawtext(olednum, "0123456789",6,0);
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <drawAlphanum+0x78>)
 800051e:	1dfb      	adds	r3, r7, #7
 8000520:	7818      	ldrb	r0, [r3, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2206      	movs	r2, #6
 8000526:	f000 fc61 	bl	8000dec <OLED_drawtext>

	OLED_drawtext(olednum, "OLED TEST : CHAR",7,0);
 800052a:	490a      	ldr	r1, [pc, #40]	; (8000554 <drawAlphanum+0x7c>)
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	7818      	ldrb	r0, [r3, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2207      	movs	r2, #7
 8000534:	f000 fc5a 	bl	8000dec <OLED_drawtext>
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}
 8000540:	080029ec 	.word	0x080029ec
 8000544:	080029fc 	.word	0x080029fc
 8000548:	08002a0c 	.word	0x08002a0c
 800054c:	08002a1c 	.word	0x08002a1c
 8000550:	08002a2c 	.word	0x08002a2c
 8000554:	08002a38 	.word	0x08002a38

08000558 <drawPunct>:

void drawPunct(unsigned char olednum)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	0002      	movs	r2, r0
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]
	OLED_drawtext(olednum, "<{([+_-=])}>",0,0);
 8000564:	490f      	ldr	r1, [pc, #60]	; (80005a4 <drawPunct+0x4c>)
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	7818      	ldrb	r0, [r3, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	2200      	movs	r2, #0
 800056e:	f000 fc3d 	bl	8000dec <OLED_drawtext>
	OLED_drawtext(olednum, "!@#$%^&*`|~?",2,0);
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <drawPunct+0x50>)
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	7818      	ldrb	r0, [r3, #0]
 8000578:	2300      	movs	r3, #0
 800057a:	2202      	movs	r2, #2
 800057c:	f000 fc36 	bl	8000dec <OLED_drawtext>
	OLED_drawtext(olednum, ".,\"\'\\/ :;",4,0);
 8000580:	490a      	ldr	r1, [pc, #40]	; (80005ac <drawPunct+0x54>)
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	7818      	ldrb	r0, [r3, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2204      	movs	r2, #4
 800058a:	f000 fc2f 	bl	8000dec <OLED_drawtext>

	OLED_drawtext(olednum, "OLED TEST : CHAR",7,0);
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <drawPunct+0x58>)
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	7818      	ldrb	r0, [r3, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	2207      	movs	r2, #7
 8000598:	f000 fc28 	bl	8000dec <OLED_drawtext>
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b002      	add	sp, #8
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08002a4c 	.word	0x08002a4c
 80005a8:	08002a5c 	.word	0x08002a5c
 80005ac:	08002a6c 	.word	0x08002a6c
 80005b0:	08002a38 	.word	0x08002a38

080005b4 <drawFrame>:

void drawFrame(unsigned char olednum)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	0002      	movs	r2, r0
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	701a      	strb	r2, [r3, #0]
	unsigned char startcol=20;
 80005c0:	240f      	movs	r4, #15
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2214      	movs	r2, #20
 80005c6:	701a      	strb	r2, [r3, #0]

	OLED_drawchar(olednum, FRAME_TOP_LEFT,1,startcol);
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	781a      	ldrb	r2, [r3, #0]
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	7818      	ldrb	r0, [r3, #0]
 80005d0:	0013      	movs	r3, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	f000 fb7b 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_HOR,1,startcol+8);
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	3308      	adds	r3, #8
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	7818      	ldrb	r0, [r3, #0]
 80005e6:	0013      	movs	r3, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	2189      	movs	r1, #137	; 0x89
 80005ec:	f000 fb70 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_TOP,1,startcol+16);
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3310      	adds	r3, #16
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	7818      	ldrb	r0, [r3, #0]
 80005fc:	0013      	movs	r3, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	2181      	movs	r1, #129	; 0x81
 8000602:	f000 fb65 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_HOR,1,startcol+24);
 8000606:	193b      	adds	r3, r7, r4
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	3318      	adds	r3, #24
 800060c:	b2da      	uxtb	r2, r3
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	7818      	ldrb	r0, [r3, #0]
 8000612:	0013      	movs	r3, r2
 8000614:	2201      	movs	r2, #1
 8000616:	2189      	movs	r1, #137	; 0x89
 8000618:	f000 fb5a 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_TOP_RIGHT,1,startcol+32);
 800061c:	193b      	adds	r3, r7, r4
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3320      	adds	r3, #32
 8000622:	b2da      	uxtb	r2, r3
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	7818      	ldrb	r0, [r3, #0]
 8000628:	0013      	movs	r3, r2
 800062a:	2201      	movs	r2, #1
 800062c:	2182      	movs	r1, #130	; 0x82
 800062e:	f000 fb4f 	bl	8000cd0 <OLED_drawchar>

	OLED_drawchar(olednum, FRAME_LINE_VER,2,startcol);
 8000632:	193b      	adds	r3, r7, r4
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	1dfb      	adds	r3, r7, #7
 8000638:	7818      	ldrb	r0, [r3, #0]
 800063a:	0013      	movs	r3, r2
 800063c:	2202      	movs	r2, #2
 800063e:	218a      	movs	r1, #138	; 0x8a
 8000640:	f000 fb46 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_VER,2,startcol+16);
 8000644:	193b      	adds	r3, r7, r4
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3310      	adds	r3, #16
 800064a:	b2da      	uxtb	r2, r3
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	7818      	ldrb	r0, [r3, #0]
 8000650:	0013      	movs	r3, r2
 8000652:	2202      	movs	r2, #2
 8000654:	218a      	movs	r1, #138	; 0x8a
 8000656:	f000 fb3b 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_VER,2,startcol+32);
 800065a:	193b      	adds	r3, r7, r4
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3320      	adds	r3, #32
 8000660:	b2da      	uxtb	r2, r3
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	7818      	ldrb	r0, [r3, #0]
 8000666:	0013      	movs	r3, r2
 8000668:	2202      	movs	r2, #2
 800066a:	218a      	movs	r1, #138	; 0x8a
 800066c:	f000 fb30 	bl	8000cd0 <OLED_drawchar>

	OLED_drawchar(olednum, FRAME_MID_LEFT,3,startcol);
 8000670:	193b      	adds	r3, r7, r4
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	1dfb      	adds	r3, r7, #7
 8000676:	7818      	ldrb	r0, [r3, #0]
 8000678:	0013      	movs	r3, r2
 800067a:	2203      	movs	r2, #3
 800067c:	2183      	movs	r1, #131	; 0x83
 800067e:	f000 fb27 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_HOR,3,startcol+8);
 8000682:	193b      	adds	r3, r7, r4
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	3308      	adds	r3, #8
 8000688:	b2da      	uxtb	r2, r3
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	7818      	ldrb	r0, [r3, #0]
 800068e:	0013      	movs	r3, r2
 8000690:	2203      	movs	r2, #3
 8000692:	2189      	movs	r1, #137	; 0x89
 8000694:	f000 fb1c 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_CENTER,3,startcol+16);
 8000698:	193b      	adds	r3, r7, r4
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	3310      	adds	r3, #16
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	7818      	ldrb	r0, [r3, #0]
 80006a4:	0013      	movs	r3, r2
 80006a6:	2203      	movs	r2, #3
 80006a8:	2184      	movs	r1, #132	; 0x84
 80006aa:	f000 fb11 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_HOR,3,startcol+24);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3318      	adds	r3, #24
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	7818      	ldrb	r0, [r3, #0]
 80006ba:	0013      	movs	r3, r2
 80006bc:	2203      	movs	r2, #3
 80006be:	2189      	movs	r1, #137	; 0x89
 80006c0:	f000 fb06 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_MID_RIGHT,3,startcol+32);
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	3320      	adds	r3, #32
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	7818      	ldrb	r0, [r3, #0]
 80006d0:	0013      	movs	r3, r2
 80006d2:	2203      	movs	r2, #3
 80006d4:	2185      	movs	r1, #133	; 0x85
 80006d6:	f000 fafb 	bl	8000cd0 <OLED_drawchar>

	OLED_drawchar(olednum, FRAME_LINE_VER,4,startcol);
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	7818      	ldrb	r0, [r3, #0]
 80006e2:	0013      	movs	r3, r2
 80006e4:	2204      	movs	r2, #4
 80006e6:	218a      	movs	r1, #138	; 0x8a
 80006e8:	f000 faf2 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_VER,4,startcol+16);
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3310      	adds	r3, #16
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	7818      	ldrb	r0, [r3, #0]
 80006f8:	0013      	movs	r3, r2
 80006fa:	2204      	movs	r2, #4
 80006fc:	218a      	movs	r1, #138	; 0x8a
 80006fe:	f000 fae7 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_VER,4,startcol+32);
 8000702:	193b      	adds	r3, r7, r4
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3320      	adds	r3, #32
 8000708:	b2da      	uxtb	r2, r3
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	7818      	ldrb	r0, [r3, #0]
 800070e:	0013      	movs	r3, r2
 8000710:	2204      	movs	r2, #4
 8000712:	218a      	movs	r1, #138	; 0x8a
 8000714:	f000 fadc 	bl	8000cd0 <OLED_drawchar>

	OLED_drawchar(olednum, FRAME_BOT_LEFT,5,startcol);
 8000718:	193b      	adds	r3, r7, r4
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	0013      	movs	r3, r2
 8000722:	2205      	movs	r2, #5
 8000724:	2186      	movs	r1, #134	; 0x86
 8000726:	f000 fad3 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_HOR,5,startcol+8);
 800072a:	193b      	adds	r3, r7, r4
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3308      	adds	r3, #8
 8000730:	b2da      	uxtb	r2, r3
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	7818      	ldrb	r0, [r3, #0]
 8000736:	0013      	movs	r3, r2
 8000738:	2205      	movs	r2, #5
 800073a:	2189      	movs	r1, #137	; 0x89
 800073c:	f000 fac8 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_BOT,5,startcol+16);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3310      	adds	r3, #16
 8000746:	b2da      	uxtb	r2, r3
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	7818      	ldrb	r0, [r3, #0]
 800074c:	0013      	movs	r3, r2
 800074e:	2205      	movs	r2, #5
 8000750:	2187      	movs	r1, #135	; 0x87
 8000752:	f000 fabd 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_LINE_HOR,5,startcol+24);
 8000756:	193b      	adds	r3, r7, r4
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3318      	adds	r3, #24
 800075c:	b2da      	uxtb	r2, r3
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	7818      	ldrb	r0, [r3, #0]
 8000762:	0013      	movs	r3, r2
 8000764:	2205      	movs	r2, #5
 8000766:	2189      	movs	r1, #137	; 0x89
 8000768:	f000 fab2 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, FRAME_BOT_RIGHT,5,startcol+32);
 800076c:	193b      	adds	r3, r7, r4
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3320      	adds	r3, #32
 8000772:	b2da      	uxtb	r2, r3
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	7818      	ldrb	r0, [r3, #0]
 8000778:	0013      	movs	r3, r2
 800077a:	2205      	movs	r2, #5
 800077c:	2188      	movs	r1, #136	; 0x88
 800077e:	f000 faa7 	bl	8000cd0 <OLED_drawchar>

	OLED_drawtext(olednum, " OLED TEST : SYM",7,0);
 8000782:	4905      	ldr	r1, [pc, #20]	; (8000798 <drawFrame+0x1e4>)
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	7818      	ldrb	r0, [r3, #0]
 8000788:	2300      	movs	r3, #0
 800078a:	2207      	movs	r2, #7
 800078c:	f000 fb2e 	bl	8000dec <OLED_drawtext>
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b005      	add	sp, #20
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	08002a78 	.word	0x08002a78

0800079c <drawArrow>:
void drawArrow(unsigned char olednum)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	0002      	movs	r2, r0
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	701a      	strb	r2, [r3, #0]
	unsigned char startcol=20;
 80007a8:	240f      	movs	r4, #15
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2214      	movs	r2, #20
 80007ae:	701a      	strb	r2, [r3, #0]

	OLED_drawchar(olednum, ARROW_UP_LEFT,1,startcol);
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	7818      	ldrb	r0, [r3, #0]
 80007b8:	0013      	movs	r3, r2
 80007ba:	2201      	movs	r2, #1
 80007bc:	218f      	movs	r1, #143	; 0x8f
 80007be:	f000 fa87 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, ARROW_UP,1,startcol+16);
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	3310      	adds	r3, #16
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	7818      	ldrb	r0, [r3, #0]
 80007ce:	0013      	movs	r3, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	218b      	movs	r1, #139	; 0x8b
 80007d4:	f000 fa7c 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, ARROW_UP_RIGHT,1,startcol+32);
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3320      	adds	r3, #32
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	0013      	movs	r3, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	2190      	movs	r1, #144	; 0x90
 80007ea:	f000 fa71 	bl	8000cd0 <OLED_drawchar>

	OLED_drawchar(olednum, ARROW_LEFT,3,startcol);
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	7818      	ldrb	r0, [r3, #0]
 80007f6:	0013      	movs	r3, r2
 80007f8:	2203      	movs	r2, #3
 80007fa:	218d      	movs	r1, #141	; 0x8d
 80007fc:	f000 fa68 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, ARROW_POINT,3,startcol+16);
 8000800:	193b      	adds	r3, r7, r4
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3310      	adds	r3, #16
 8000806:	b2da      	uxtb	r2, r3
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	7818      	ldrb	r0, [r3, #0]
 800080c:	0013      	movs	r3, r2
 800080e:	2203      	movs	r2, #3
 8000810:	2193      	movs	r1, #147	; 0x93
 8000812:	f000 fa5d 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, ARROW_RIGHT,3,startcol+32);
 8000816:	193b      	adds	r3, r7, r4
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3320      	adds	r3, #32
 800081c:	b2da      	uxtb	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	7818      	ldrb	r0, [r3, #0]
 8000822:	0013      	movs	r3, r2
 8000824:	2203      	movs	r2, #3
 8000826:	218e      	movs	r1, #142	; 0x8e
 8000828:	f000 fa52 	bl	8000cd0 <OLED_drawchar>

	OLED_drawchar(olednum, ARROW_DOWN_LEFT,5,startcol);
 800082c:	193b      	adds	r3, r7, r4
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	7818      	ldrb	r0, [r3, #0]
 8000834:	0013      	movs	r3, r2
 8000836:	2205      	movs	r2, #5
 8000838:	2191      	movs	r1, #145	; 0x91
 800083a:	f000 fa49 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, ARROW_DOWN,5,startcol+16);
 800083e:	193b      	adds	r3, r7, r4
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3310      	adds	r3, #16
 8000844:	b2da      	uxtb	r2, r3
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	7818      	ldrb	r0, [r3, #0]
 800084a:	0013      	movs	r3, r2
 800084c:	2205      	movs	r2, #5
 800084e:	218c      	movs	r1, #140	; 0x8c
 8000850:	f000 fa3e 	bl	8000cd0 <OLED_drawchar>
	OLED_drawchar(olednum, ARROW_DOWN_RIGHT,5,startcol+32);
 8000854:	193b      	adds	r3, r7, r4
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	3320      	adds	r3, #32
 800085a:	b2da      	uxtb	r2, r3
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	7818      	ldrb	r0, [r3, #0]
 8000860:	0013      	movs	r3, r2
 8000862:	2205      	movs	r2, #5
 8000864:	2192      	movs	r1, #146	; 0x92
 8000866:	f000 fa33 	bl	8000cd0 <OLED_drawchar>

	OLED_drawtext(olednum, " OLED TEST : SYM",7,0);
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <drawArrow+0xe4>)
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	7818      	ldrb	r0, [r3, #0]
 8000870:	2300      	movs	r3, #0
 8000872:	2207      	movs	r2, #7
 8000874:	f000 faba 	bl	8000dec <OLED_drawtext>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b005      	add	sp, #20
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	08002a78 	.word	0x08002a78

08000884 <drawBytes>:

void drawBytes(unsigned char olednum)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
	unsigned char Ts,ds;

	OLED_setpos(olednum,3,5);
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2205      	movs	r2, #5
 8000896:	2103      	movs	r1, #3
 8000898:	0018      	movs	r0, r3
 800089a:	f000 f9e7 	bl	8000c6c <OLED_setpos>
	for(Ts=0;Ts<11;Ts++) //Draw pattern 11 times
 800089e:	230f      	movs	r3, #15
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e01f      	b.n	80008e8 <drawBytes+0x64>
	{
		for(ds=0;ds<10;ds++)
 80008a8:	230e      	movs	r3, #14
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e00f      	b.n	80008d2 <drawBytes+0x4e>
		{
			OLED_drawbyte(olednum, dsine[ds]);
 80008b2:	240e      	movs	r4, #14
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <drawBytes+0xe4>)
 80008ba:	5cd2      	ldrb	r2, [r2, r3]
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f9ee 	bl	8000ca4 <OLED_drawbyte>
		for(ds=0;ds<10;ds++)
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	3201      	adds	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	230e      	movs	r3, #14
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b09      	cmp	r3, #9
 80008da:	d9ea      	bls.n	80008b2 <drawBytes+0x2e>
	for(Ts=0;Ts<11;Ts++) //Draw pattern 11 times
 80008dc:	210f      	movs	r1, #15
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	781a      	ldrb	r2, [r3, #0]
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	3201      	adds	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	240f      	movs	r4, #15
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b0a      	cmp	r3, #10
 80008f0:	d9da      	bls.n	80008a8 <drawBytes+0x24>
		}
	}

	OLED_setpos(olednum,5,3);
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2203      	movs	r2, #3
 80008f8:	2105      	movs	r1, #5
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f9b6 	bl	8000c6c <OLED_setpos>
	for(Ts=0;Ts<8;Ts++) //Draw pattern 8 times
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e01f      	b.n	8000948 <drawBytes+0xc4>
	{
		for(ds=0;ds<14;ds++)
 8000908:	230e      	movs	r3, #14
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e00f      	b.n	8000932 <drawBytes+0xae>
		{
			OLED_drawbyte(olednum, dtri[ds]);
 8000912:	240e      	movs	r4, #14
 8000914:	193b      	adds	r3, r7, r4
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <drawBytes+0xe8>)
 800091a:	5cd2      	ldrb	r2, [r2, r3]
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f9be 	bl	8000ca4 <OLED_drawbyte>
		for(ds=0;ds<14;ds++)
 8000928:	193b      	adds	r3, r7, r4
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	193b      	adds	r3, r7, r4
 800092e:	3201      	adds	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	230e      	movs	r3, #14
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0d      	cmp	r3, #13
 800093a:	d9ea      	bls.n	8000912 <drawBytes+0x8e>
	for(Ts=0;Ts<8;Ts++) //Draw pattern 8 times
 800093c:	210f      	movs	r1, #15
 800093e:	187b      	adds	r3, r7, r1
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	187b      	adds	r3, r7, r1
 8000944:	3201      	adds	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	230f      	movs	r3, #15
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b07      	cmp	r3, #7
 8000950:	d9da      	bls.n	8000908 <drawBytes+0x84>
		}
	}

	OLED_drawtext(olednum, "  DRAW PATTERN  ",7,0);
 8000952:	4907      	ldr	r1, [pc, #28]	; (8000970 <drawBytes+0xec>)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	7818      	ldrb	r0, [r3, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	2207      	movs	r2, #7
 800095c:	f000 fa46 	bl	8000dec <OLED_drawtext>
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b005      	add	sp, #20
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	2000000c 	.word	0x2000000c
 8000970:	08002a8c 	.word	0x08002a8c

08000974 <drawLoadingBar>:

void drawLoadingBar(unsigned char olednum)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
	unsigned char lb;

	OLED_setpos(olednum, 4,5);
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2205      	movs	r2, #5
 8000986:	2104      	movs	r1, #4
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f96f 	bl	8000c6c <OLED_setpos>

	for(lb=5;lb<123;lb++)
 800098e:	230f      	movs	r3, #15
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	2205      	movs	r2, #5
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e00e      	b.n	80009b6 <drawLoadingBar+0x42>
	{
		OLED_drawbyte(olednum, 0xFF);
 8000998:	1dfb      	adds	r3, r7, #7
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	21ff      	movs	r1, #255	; 0xff
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f980 	bl	8000ca4 <OLED_drawbyte>
		HAL_Delay(10);
 80009a4:	200a      	movs	r0, #10
 80009a6:	f000 fcbb 	bl	8001320 <HAL_Delay>
	for(lb=5;lb<123;lb++)
 80009aa:	210f      	movs	r1, #15
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	3201      	adds	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	230f      	movs	r3, #15
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b7a      	cmp	r3, #122	; 0x7a
 80009be:	d9eb      	bls.n	8000998 <drawLoadingBar+0x24>
	}
	HAL_Delay(1000);
 80009c0:	23fa      	movs	r3, #250	; 0xfa
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fcab 	bl	8001320 <HAL_Delay>
	OLED_clearblock(olednum,4,5,122); //Start & finish column = start & finish lb
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	7818      	ldrb	r0, [r3, #0]
 80009ce:	237a      	movs	r3, #122	; 0x7a
 80009d0:	2205      	movs	r2, #5
 80009d2:	2104      	movs	r1, #4
 80009d4:	f000 fac3 	bl	8000f5e <OLED_clearblock>
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b004      	add	sp, #16
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>

080009ea <ssd1306_init>:
#include "periph_stm32f.h"
#include "oled_ssd1306.h"
#include "font.h"

void ssd1306_init(unsigned char olednum)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	0002      	movs	r2, r0
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	701a      	strb	r2, [r3, #0]
	ssd1306_sendcom(olednum,0xAE); //Set Display Off
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	21ae      	movs	r1, #174	; 0xae
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 f894 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xD5); //Set Display Clock Divider Ratio/Oscillator Frequency
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	21d5      	movs	r1, #213	; 0xd5
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 f88e 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x80);
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 f888 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xA8); //Set Multiplex Ratio
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	21a8      	movs	r1, #168	; 0xa8
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 f882 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x3F);
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	213f      	movs	r1, #63	; 0x3f
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f87c 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xD3); //Set Display Offset
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	21d3      	movs	r1, #211	; 0xd3
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 f876 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x00);
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2100      	movs	r1, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 f870 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x40); //Set Display Start Line
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 f86a 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x8D); //Set Charge Pump
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	218d      	movs	r1, #141	; 0x8d
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 f864 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x14); //Internal VCC
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2114      	movs	r1, #20
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 f85e 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x20); //Set Memory Mode
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2120      	movs	r1, #32
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 f858 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x00); //Horizontal Addressing
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2100      	movs	r1, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 f852 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xA1); //Set Segment Re-Map
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	21a1      	movs	r1, #161	; 0xa1
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 f84c 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xC8); //Set COM Output Scan Direction
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	21c8      	movs	r1, #200	; 0xc8
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 f846 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xDA); //Set COM Pins HW Config
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	21da      	movs	r1, #218	; 0xda
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 f840 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x12);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2112      	movs	r1, #18
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 f83a 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x81); //Set Contrast Control
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2181      	movs	r1, #129	; 0x81
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 f834 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xCF);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	21cf      	movs	r1, #207	; 0xcf
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 f82e 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xD9); //Set Pre-Charge Period
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	21d9      	movs	r1, #217	; 0xd9
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 f828 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xF1);
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	21f1      	movs	r1, #241	; 0xf1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 f822 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xDB); //Set VCOMH Deselect Level
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	21db      	movs	r1, #219	; 0xdb
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 f81c 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0x40);
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2140      	movs	r1, #64	; 0x40
 8000af8:	0018      	movs	r0, r3
 8000afa:	f000 f816 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xA4); //Set Entire Display On/Off
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	21a4      	movs	r1, #164	; 0xa4
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f810 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xA6); //Set Normal/Inverse Display
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	21a6      	movs	r1, #166	; 0xa6
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 f80a 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,0xAF); //Set Display On
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	21af      	movs	r1, #175	; 0xaf
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 f804 	bl	8000b2a <ssd1306_sendcom>
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <ssd1306_sendcom>:

void ssd1306_sendcom(unsigned char olednum, unsigned char ssd1306com)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	0002      	movs	r2, r0
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	1c0a      	adds	r2, r1, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	i2c_write_2byte(olednum,commode,ssd1306com); //Send Command
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2100      	movs	r1, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 faa4 	bl	8001094 <i2c_write_2byte>
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <ssd1306_senddat>:

void ssd1306_senddat(unsigned char olednum, unsigned char ssd1306dat)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	1dbb      	adds	r3, r7, #6
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	i2c_write_2byte(olednum,datmode,ssd1306dat); //Send Data
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fa8f 	bl	8001094 <i2c_write_2byte>
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <ssd1306_setpos>:

void ssd1306_setpos(unsigned char olednum, unsigned char row, unsigned char col)
{
 8000b7e:	b590      	push	{r4, r7, lr}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	0004      	movs	r4, r0
 8000b86:	0008      	movs	r0, r1
 8000b88:	0011      	movs	r1, r2
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	1c22      	adds	r2, r4, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	1d7b      	adds	r3, r7, #5
 8000b98:	1c0a      	adds	r2, r1, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	ssd1306_sendcom(olednum,(0xB0|(row&0x0F))); //Set page of row
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	2250      	movs	r2, #80	; 0x50
 8000baa:	4252      	negs	r2, r2
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ffb6 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,(0x00|(col&0x0F))); //Set lower nibble of column
 8000bbe:	1d7b      	adds	r3, r7, #5
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff ffab 	bl	8000b2a <ssd1306_sendcom>
	ssd1306_sendcom(olednum,(0x10|((col>>4)&0x0F))); //Set upper nibble of column
 8000bd4:	1d7b      	adds	r3, r7, #5
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	2210      	movs	r2, #16
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff9c 	bl	8000b2a <ssd1306_sendcom>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b003      	add	sp, #12
 8000bf8:	bd90      	pop	{r4, r7, pc}

08000bfa <ssd1306_clear>:

void ssd1306_clear(unsigned char olednum) 
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	0002      	movs	r2, r0
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	701a      	strb	r2, [r3, #0]
  	unsigned char col,row;
	ssd1306_setpos(olednum,0,0);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff ffb5 	bl	8000b7e <ssd1306_setpos>
  	for(row=0;row<OLED_ROW+1;row++)	//Scan rows, add 1 row for completely flush.
 8000c14:	230e      	movs	r3, #14
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e01c      	b.n	8000c58 <ssd1306_clear+0x5e>
  	   {      
      		for(col=0;col<OLED_COL;col++)	//Scan columns
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e00b      	b.n	8000c40 <ssd1306_clear+0x46>
                   {
        		ssd1306_senddat(olednum,0);	//Send 0 to every pixel
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff90 	bl	8000b54 <ssd1306_senddat>
      		for(col=0;col<OLED_COL;col++)	//Scan columns
 8000c34:	210f      	movs	r1, #15
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	3201      	adds	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	daed      	bge.n	8000c28 <ssd1306_clear+0x2e>
  	for(row=0;row<OLED_ROW+1;row++)	//Scan rows, add 1 row for completely flush.
 8000c4c:	210e      	movs	r1, #14
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	3201      	adds	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	230e      	movs	r3, #14
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d9dd      	bls.n	8000c1e <ssd1306_clear+0x24>
                   }
           }
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <OLED_setpos>:

void OLED_setpos(unsigned char olednum, unsigned char row, unsigned char col)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0004      	movs	r4, r0
 8000c74:	0008      	movs	r0, r1
 8000c76:	0011      	movs	r1, r2
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	1c22      	adds	r2, r4, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	1dbb      	adds	r3, r7, #6
 8000c80:	1c02      	adds	r2, r0, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	1d7b      	adds	r3, r7, #5
 8000c86:	1c0a      	adds	r2, r1, #0
 8000c88:	701a      	strb	r2, [r3, #0]
	ssd1306_setpos(olednum,row,col); //Set coordinate (for LCD_drawbyte)
 8000c8a:	1d7b      	adds	r3, r7, #5
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	7819      	ldrb	r1, [r3, #0]
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff71 	bl	8000b7e <ssd1306_setpos>
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <OLED_drawbyte>:

void OLED_drawbyte(unsigned char olednum, unsigned char dbyte)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	1c0a      	adds	r2, r1, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	ssd1306_senddat(olednum,dbyte); //Send 1 byte data only
 8000cb6:	1dbb      	adds	r3, r7, #6
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff ff47 	bl	8000b54 <ssd1306_senddat>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <OLED_drawchar>:

void OLED_drawchar(unsigned char olednum, unsigned char chr, unsigned char chrrow, unsigned char chrcol)
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0005      	movs	r5, r0
 8000cd8:	000c      	movs	r4, r1
 8000cda:	0010      	movs	r0, r2
 8000cdc:	0019      	movs	r1, r3
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	1c2a      	adds	r2, r5, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	1c22      	adds	r2, r4, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	1d7b      	adds	r3, r7, #5
 8000cec:	1c02      	adds	r2, r0, #0
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	1c0a      	adds	r2, r1, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	unsigned char ci,fchar;
	unsigned int chridx;

	ssd1306_setpos(olednum,chrrow,chrcol);
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	1d7b      	adds	r3, r7, #5
 8000cfc:	7819      	ldrb	r1, [r3, #0]
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff ff3b 	bl	8000b7e <ssd1306_setpos>
	
	if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation Area
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	d934      	bls.n	8000d7a <OLED_drawchar+0xaa>
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db2f      	blt.n	8000d7a <OLED_drawchar+0xaa>
	  {
	    ssd1306_senddat(olednum,0x00);
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2100      	movs	r1, #0
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff17 	bl	8000b54 <ssd1306_senddat>
            chridx=(chr-32)*5; //Start at character 32 (Space). 5 columns for each character
 8000d26:	1dbb      	adds	r3, r7, #6
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b20      	subs	r3, #32
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	189b      	adds	r3, r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
            for(ci=0;ci<5;ci++)
 8000d36:	2317      	movs	r3, #23
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e016      	b.n	8000d6e <OLED_drawchar+0x9e>
		{
		   fchar = font_arr[chridx+ci]; //Get character pattern from Font Array
 8000d40:	2417      	movs	r4, #23
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	18d2      	adds	r2, r2, r3
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	183b      	adds	r3, r7, r0
 8000d4e:	4926      	ldr	r1, [pc, #152]	; (8000de8 <OLED_drawchar+0x118>)
 8000d50:	5c8a      	ldrb	r2, [r1, r2]
 8000d52:	701a      	strb	r2, [r3, #0]
		   ssd1306_senddat(olednum,fchar); //Send pattern 1 byte at a time
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fef8 	bl	8000b54 <ssd1306_senddat>
            for(ci=0;ci<5;ci++)
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	3201      	adds	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	2317      	movs	r3, #23
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d9e3      	bls.n	8000d40 <OLED_drawchar+0x70>
	if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation Area
 8000d78:	e032      	b.n	8000de0 <OLED_drawchar+0x110>
		}
          }
 	else if((chr>127)&&(chr<148)) //Frame & Arrow Area
 8000d7a:	1dbb      	adds	r3, r7, #6
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da2d      	bge.n	8000de0 <OLED_drawchar+0x110>
 8000d84:	1dbb      	adds	r3, r7, #6
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b93      	cmp	r3, #147	; 0x93
 8000d8a:	d829      	bhi.n	8000de0 <OLED_drawchar+0x110>
	  {
	    chridx=(chr-128)*8; //Start at index 128. 5 columns for each symbol
 8000d8c:	1dbb      	adds	r3, r7, #6
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3b80      	subs	r3, #128	; 0x80
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	613b      	str	r3, [r7, #16]
            for(ci=0;ci<8;ci++)
 8000d96:	2317      	movs	r3, #23
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e019      	b.n	8000dd4 <OLED_drawchar+0x104>
		{
 		   fchar = font_arr[chridx+480+ci]; //Get symbol pattern from Font Array
 8000da0:	2417      	movs	r4, #23
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	781a      	ldrb	r2, [r3, #0]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	33e1      	adds	r3, #225	; 0xe1
 8000dac:	33ff      	adds	r3, #255	; 0xff
 8000dae:	001a      	movs	r2, r3
 8000db0:	200f      	movs	r0, #15
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <OLED_drawchar+0x118>)
 8000db6:	5c8a      	ldrb	r2, [r1, r2]
 8000db8:	701a      	strb	r2, [r3, #0]
		   ssd1306_senddat(olednum,fchar); //Send pattern 1 byte at a time		   
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff fec5 	bl	8000b54 <ssd1306_senddat>
            for(ci=0;ci<8;ci++)
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	3201      	adds	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	2317      	movs	r3, #23
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	d9e0      	bls.n	8000da0 <OLED_drawchar+0xd0>
		}
	  }
	else{}
}
 8000dde:	e7ff      	b.n	8000de0 <OLED_drawchar+0x110>
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b006      	add	sp, #24
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	08002ac0 	.word	0x08002ac0

08000dec <OLED_drawtext>:

void OLED_drawtext(unsigned char olednum, char *text, unsigned char txtrow, unsigned char txtcol)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0004      	movs	r4, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	0010      	movs	r0, r2
 8000df8:	0019      	movs	r1, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	1c22      	adds	r2, r4, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	1c02      	adds	r2, r0, #0
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	1d7b      	adds	r3, r7, #5
 8000e08:	1c0a      	adds	r2, r1, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	unsigned int stridx = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]

	while(text[stridx] != 0) //Scan characters in string
 8000e10:	e015      	b.n	8000e3e <OLED_drawtext+0x52>
	  {
		OLED_drawchar(olednum,text[stridx],txtrow,txtcol+(8*stridx)); //Display each character
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	18d3      	adds	r3, r2, r3
 8000e18:	7819      	ldrb	r1, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	1d7b      	adds	r3, r7, #5
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	18d3      	adds	r3, r2, r3
 8000e28:	b2dc      	uxtb	r4, r3
 8000e2a:	1dbb      	adds	r3, r7, #6
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	7818      	ldrb	r0, [r3, #0]
 8000e32:	0023      	movs	r3, r4
 8000e34:	f7ff ff4c 	bl	8000cd0 <OLED_drawchar>
		stridx++;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
	while(text[stridx] != 0) //Scan characters in string
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	18d3      	adds	r3, r2, r3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1e3      	bne.n	8000e12 <OLED_drawtext+0x26>
	  }
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b005      	add	sp, #20
 8000e52:	bd90      	pop	{r4, r7, pc}

08000e54 <OLED_drawint>:

void OLED_drawint(unsigned char olednum, unsigned int num, unsigned char numrow, unsigned char numcol)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0004      	movs	r4, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	0010      	movs	r0, r2
 8000e60:	0019      	movs	r1, r3
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	1c22      	adds	r2, r4, #0
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	1d7b      	adds	r3, r7, #5
 8000e70:	1c0a      	adds	r2, r1, #0
 8000e72:	701a      	strb	r2, [r3, #0]
	char ibuff[11]; //MAX : 10 DIGIT -> 4294967295

	unsigned char ndigit=0,nd;
 8000e74:	231f      	movs	r3, #31
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	unsigned int numb; //Must be unsigned, so max. number can be 4294967295

	numb = num;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	61bb      	str	r3, [r7, #24]
	while(numb!=0) //Counting digit
 8000e80:	e00c      	b.n	8000e9c <OLED_drawint+0x48>
	  {
	  	ndigit++;
 8000e82:	211f      	movs	r1, #31
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	3201      	adds	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		numb /= 10;	
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	210a      	movs	r1, #10
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff f938 	bl	8000108 <__udivsi3>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	61bb      	str	r3, [r7, #24]
	while(numb!=0) //Counting digit
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1ef      	bne.n	8000e82 <OLED_drawint+0x2e>
	  }
	for(nd=0;nd<ndigit;nd++) //Converting each digit
 8000ea2:	231e      	movs	r3, #30
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e021      	b.n	8000ef0 <OLED_drawint+0x9c>
	  {
		numb = num%10;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	210a      	movs	r1, #10
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff f9af 	bl	8000214 <__aeabi_uidivmod>
 8000eb6:	000b      	movs	r3, r1
 8000eb8:	61bb      	str	r3, [r7, #24]
		num = num/10;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff f922 	bl	8000108 <__udivsi3>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	603b      	str	r3, [r7, #0]
		ibuff[ndigit-(nd+1)] = numb + '0'; //Start from last_index-1
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	231f      	movs	r3, #31
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	7819      	ldrb	r1, [r3, #0]
 8000ed2:	201e      	movs	r0, #30
 8000ed4:	183b      	adds	r3, r7, r0
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	1acb      	subs	r3, r1, r3
 8000edc:	3230      	adds	r2, #48	; 0x30
 8000ede:	b2d1      	uxtb	r1, r2
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	18ba      	adds	r2, r7, r2
 8000ee4:	54d1      	strb	r1, [r2, r3]
	for(nd=0;nd<ndigit;nd++) //Converting each digit
 8000ee6:	183b      	adds	r3, r7, r0
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	183b      	adds	r3, r7, r0
 8000eec:	3201      	adds	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	231e      	movs	r3, #30
 8000ef2:	18fa      	adds	r2, r7, r3
 8000ef4:	211f      	movs	r1, #31
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3d5      	bcc.n	8000eac <OLED_drawint+0x58>
	  }
	ibuff[ndigit] = '\0'; //Last character is null
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	200c      	movs	r0, #12
 8000f06:	183a      	adds	r2, r7, r0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	54d1      	strb	r1, [r2, r3]

	OLED_drawtext(olednum,ibuff,numrow,numcol); //Display number as text
 8000f0c:	1d7b      	adds	r3, r7, #5
 8000f0e:	781c      	ldrb	r4, [r3, #0]
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	1839      	adds	r1, r7, r0
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	7818      	ldrb	r0, [r3, #0]
 8000f1a:	0023      	movs	r3, r4
 8000f1c:	f7ff ff66 	bl	8000dec <OLED_drawtext>
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <OLED_clear>:

void OLED_clear(unsigned char olednum)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	701a      	strb	r2, [r3, #0]
	ssd1306_sendcom(olednum,0xAE); //Set Display off
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	21ae      	movs	r1, #174	; 0xae
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fdf5 	bl	8000b2a <ssd1306_sendcom>
  	ssd1306_clear(olednum); //Clear Display
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fe58 	bl	8000bfa <ssd1306_clear>
  	ssd1306_sendcom(olednum,0xAF); //Set Display on
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	21af      	movs	r1, #175	; 0xaf
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff fdea 	bl	8000b2a <ssd1306_sendcom>
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <OLED_clearblock>:

void OLED_clearblock(unsigned char olednum, unsigned char row, unsigned char col_start, unsigned char col_fin)
{
 8000f5e:	b5b0      	push	{r4, r5, r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	0005      	movs	r5, r0
 8000f66:	000c      	movs	r4, r1
 8000f68:	0010      	movs	r0, r2
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	1c2a      	adds	r2, r5, #0
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	1dbb      	adds	r3, r7, #6
 8000f74:	1c22      	adds	r2, r4, #0
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	1d7b      	adds	r3, r7, #5
 8000f7a:	1c02      	adds	r2, r0, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	1c0a      	adds	r2, r1, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	unsigned char col;

	ssd1306_setpos(olednum,row,col_start); 	//Set start position
 8000f84:	1d7b      	adds	r3, r7, #5
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	1dbb      	adds	r3, r7, #6
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fdf4 	bl	8000b7e <ssd1306_setpos>
	for(col=col_start;col<=col_fin;col++) 	//Scan columns
 8000f96:	230f      	movs	r3, #15
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	1d7a      	adds	r2, r7, #5
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e00b      	b.n	8000fba <OLED_clearblock+0x5c>
	   {
		ssd1306_senddat(olednum,0);	//Send 0 to every pixel in a column
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fdd3 	bl	8000b54 <ssd1306_senddat>
	for(col=col_start;col<=col_fin;col++) 	//Scan columns
 8000fae:	210f      	movs	r1, #15
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	3201      	adds	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	230f      	movs	r3, #15
 8000fbc:	18fa      	adds	r2, r7, r3
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d9ec      	bls.n	8000fa2 <OLED_clearblock+0x44>
	   }
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bdb0      	pop	{r4, r5, r7, pc}

08000fd2 <OLED_normal>:

void OLED_normal(unsigned char olednum)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	0002      	movs	r2, r0
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	701a      	strb	r2, [r3, #0]
	ssd1306_sendcom(olednum,0xA6);	//On Pixel in Off Background
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	21a6      	movs	r1, #166	; 0xa6
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fda0 	bl	8000b2a <ssd1306_sendcom>
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <OLED_reverse>:

void OLED_reverse(unsigned char olednum)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	701a      	strb	r2, [r3, #0]
	ssd1306_sendcom(olednum,0xA7);	//Off Pixel in On Background
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	21a7      	movs	r1, #167	; 0xa7
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fd90 	bl	8000b2a <ssd1306_sendcom>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_I2C1_Init+0x74>)
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fbad 	bl	80017b0 <HAL_I2C_Init>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105a:	f7ff fcc1 	bl	80009e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_I2C1_Init+0x74>)
 8001060:	2100      	movs	r1, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fece 	bl	8001e04 <HAL_I2CEx_ConfigAnalogFilter>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800106c:	f7ff fcb8 	bl	80009e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <MX_I2C1_Init+0x74>)
 8001072:	2100      	movs	r1, #0
 8001074:	0018      	movs	r0, r3
 8001076:	f000 ff11 	bl	8001e9c <HAL_I2CEx_ConfigDigitalFilter>
 800107a:	1e03      	subs	r3, r0, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f7ff fcaf 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000044 	.word	0x20000044
 800108c:	40005400 	.word	0x40005400
 8001090:	2000090e 	.word	0x2000090e

08001094 <i2c_write_2byte>:

void i2c_write_2byte(unsigned char devaddr, unsigned char dbyte1, unsigned char dbyte2)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b087      	sub	sp, #28
 8001098:	af02      	add	r7, sp, #8
 800109a:	0004      	movs	r4, r0
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	1c22      	adds	r2, r4, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	1dbb      	adds	r3, r7, #6
 80010a8:	1c02      	adds	r2, r0, #0
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	1d7b      	adds	r3, r7, #5
 80010ae:	1c0a      	adds	r2, r1, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	unsigned char dbyte[2];
	dbyte[0] = dbyte1; //I2C data 1st byte
 80010b2:	200c      	movs	r0, #12
 80010b4:	183b      	adds	r3, r7, r0
 80010b6:	1dba      	adds	r2, r7, #6
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	701a      	strb	r2, [r3, #0]
	dbyte[1] = dbyte2; //I2C data 2nd byte
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	1d7a      	adds	r2, r7, #5
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&hi2c1, (devaddr<<1), dbyte, 2, 10);
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	18db      	adds	r3, r3, r3
 80010cc:	b299      	uxth	r1, r3
 80010ce:	183a      	adds	r2, r7, r0
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <i2c_write_2byte+0x50>)
 80010d2:	230a      	movs	r3, #10
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2302      	movs	r3, #2
 80010d8:	f000 fc00 	bl	80018dc <HAL_I2C_Master_Transmit>
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b005      	add	sp, #20
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	20000044 	.word	0x20000044

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_MspInit+0x44>)
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_MspInit+0x44>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	619a      	str	r2, [r3, #24]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_MspInit+0x44>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_MspInit+0x44>)
 8001108:	69da      	ldr	r2, [r3, #28]
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_MspInit+0x44>)
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0549      	lsls	r1, r1, #21
 8001110:	430a      	orrs	r2, r1
 8001112:	61da      	str	r2, [r3, #28]
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_MspInit+0x44>)
 8001116:	69da      	ldr	r2, [r3, #28]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	055b      	lsls	r3, r3, #21
 800111c:	4013      	ands	r3, r2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08b      	sub	sp, #44	; 0x2c
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	2414      	movs	r4, #20
 800113a:	193b      	adds	r3, r7, r4
 800113c:	0018      	movs	r0, r3
 800113e:	2314      	movs	r3, #20
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f001 fc34 	bl	80029b0 <memset>
  if(hi2c->Instance==I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <HAL_I2C_MspInit+0x90>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d131      	bne.n	80011b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_I2C_MspInit+0x94>)
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_I2C_MspInit+0x94>)
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	02c9      	lsls	r1, r1, #11
 800115c:	430a      	orrs	r2, r1
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_I2C_MspInit+0x94>)
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	02db      	lsls	r3, r3, #11
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116e:	0021      	movs	r1, r4
 8001170:	187b      	adds	r3, r7, r1
 8001172:	22c0      	movs	r2, #192	; 0xc0
 8001174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2212      	movs	r2, #18
 800117a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2203      	movs	r2, #3
 8001186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2201      	movs	r2, #1
 800118c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	187b      	adds	r3, r7, r1
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_I2C_MspInit+0x98>)
 8001192:	0019      	movs	r1, r3
 8001194:	0010      	movs	r0, r2
 8001196:	f000 f99b 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_I2C_MspInit+0x94>)
 800119c:	69da      	ldr	r2, [r3, #28]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_I2C_MspInit+0x94>)
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0389      	lsls	r1, r1, #14
 80011a4:	430a      	orrs	r2, r1
 80011a6:	61da      	str	r2, [r3, #28]
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_I2C_MspInit+0x94>)
 80011aa:	69da      	ldr	r2, [r3, #28]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	039b      	lsls	r3, r3, #14
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b00b      	add	sp, #44	; 0x2c
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <NMI_Handler+0x4>

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f87a 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001206:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490e      	ldr	r1, [pc, #56]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0b      	ldr	r4, [pc, #44]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800122e:	f7ff ffe4 	bl	80011fa <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001232:	f001 fb99 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001236:	f7fe fff3 	bl	8000220 <main>

0800123a <LoopForever>:

LoopForever:
    b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   r0, =_estack
 800123c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001248:	08002d58 	.word	0x08002d58
  ldr r2, =_sbss
 800124c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001250:	20000094 	.word	0x20000094

08001254 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_IRQHandler>
	...

08001258 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_Init+0x24>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_Init+0x24>)
 8001262:	2110      	movs	r1, #16
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f809 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff ff3b 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_InitTick+0x5c>)
 800128a:	681c      	ldr	r4, [r3, #0]
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_InitTick+0x60>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	0019      	movs	r1, r3
 8001292:	23fa      	movs	r3, #250	; 0xfa
 8001294:	0098      	lsls	r0, r3, #2
 8001296:	f7fe ff37 	bl	8000108 <__udivsi3>
 800129a:	0003      	movs	r3, r0
 800129c:	0019      	movs	r1, r3
 800129e:	0020      	movs	r0, r4
 80012a0:	f7fe ff32 	bl	8000108 <__udivsi3>
 80012a4:	0003      	movs	r3, r0
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 f905 	bl	80014b6 <HAL_SYSTICK_Config>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e00f      	b.n	80012d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d80b      	bhi.n	80012d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	2301      	movs	r3, #1
 80012be:	425b      	negs	r3, r3
 80012c0:	2200      	movs	r2, #0
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f8e2 	bl	800148c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_InitTick+0x64>)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b003      	add	sp, #12
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	2000001c 	.word	0x2000001c
 80012e0:	20000024 	.word	0x20000024
 80012e4:	20000020 	.word	0x20000020

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_IncTick+0x1c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	001a      	movs	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	18d2      	adds	r2, r2, r3
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_IncTick+0x20>)
 80012fa:	601a      	str	r2, [r3, #0]
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	20000024 	.word	0x20000024
 8001308:	20000090 	.word	0x20000090

0800130c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <HAL_GetTick+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	20000090 	.word	0x20000090

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff fff0 	bl	800130c <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	001a      	movs	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	189b      	adds	r3, r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	f7ff ffe0 	bl	800130c <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b004      	add	sp, #16
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	20000024 	.word	0x20000024

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b7f      	cmp	r3, #127	; 0x7f
 800137c:	d828      	bhi.n	80013d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137e:	4a2f      	ldr	r2, [pc, #188]	; (800143c <__NVIC_SetPriority+0xd4>)
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b25b      	sxtb	r3, r3
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	33c0      	adds	r3, #192	; 0xc0
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	589b      	ldr	r3, [r3, r2]
 800138e:	1dfa      	adds	r2, r7, #7
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	0011      	movs	r1, r2
 8001394:	2203      	movs	r2, #3
 8001396:	400a      	ands	r2, r1
 8001398:	00d2      	lsls	r2, r2, #3
 800139a:	21ff      	movs	r1, #255	; 0xff
 800139c:	4091      	lsls	r1, r2
 800139e:	000a      	movs	r2, r1
 80013a0:	43d2      	mvns	r2, r2
 80013a2:	401a      	ands	r2, r3
 80013a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	019b      	lsls	r3, r3, #6
 80013aa:	22ff      	movs	r2, #255	; 0xff
 80013ac:	401a      	ands	r2, r3
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	0018      	movs	r0, r3
 80013b4:	2303      	movs	r3, #3
 80013b6:	4003      	ands	r3, r0
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013bc:	481f      	ldr	r0, [pc, #124]	; (800143c <__NVIC_SetPriority+0xd4>)
 80013be:	1dfb      	adds	r3, r7, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	430a      	orrs	r2, r1
 80013c8:	33c0      	adds	r3, #192	; 0xc0
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ce:	e031      	b.n	8001434 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <__NVIC_SetPriority+0xd8>)
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	0019      	movs	r1, r3
 80013d8:	230f      	movs	r3, #15
 80013da:	400b      	ands	r3, r1
 80013dc:	3b08      	subs	r3, #8
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3306      	adds	r3, #6
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	18d3      	adds	r3, r2, r3
 80013e6:	3304      	adds	r3, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1dfa      	adds	r2, r7, #7
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	0011      	movs	r1, r2
 80013f0:	2203      	movs	r2, #3
 80013f2:	400a      	ands	r2, r1
 80013f4:	00d2      	lsls	r2, r2, #3
 80013f6:	21ff      	movs	r1, #255	; 0xff
 80013f8:	4091      	lsls	r1, r2
 80013fa:	000a      	movs	r2, r1
 80013fc:	43d2      	mvns	r2, r2
 80013fe:	401a      	ands	r2, r3
 8001400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	019b      	lsls	r3, r3, #6
 8001406:	22ff      	movs	r2, #255	; 0xff
 8001408:	401a      	ands	r2, r3
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	2303      	movs	r3, #3
 8001412:	4003      	ands	r3, r0
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <__NVIC_SetPriority+0xd8>)
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	001c      	movs	r4, r3
 8001420:	230f      	movs	r3, #15
 8001422:	4023      	ands	r3, r4
 8001424:	3b08      	subs	r3, #8
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	430a      	orrs	r2, r1
 800142a:	3306      	adds	r3, #6
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	18c3      	adds	r3, r0, r3
 8001430:	3304      	adds	r3, #4
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b003      	add	sp, #12
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	045b      	lsls	r3, r3, #17
 8001454:	429a      	cmp	r2, r3
 8001456:	d301      	bcc.n	800145c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001458:	2301      	movs	r3, #1
 800145a:	e010      	b.n	800147e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <SysTick_Config+0x44>)
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	3a01      	subs	r2, #1
 8001462:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	2103      	movs	r1, #3
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff7c 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x44>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	210f      	movs	r1, #15
 8001498:	187b      	adds	r3, r7, r1
 800149a:	1c02      	adds	r2, r0, #0
 800149c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ffbf 	bl	8001444 <SysTick_Config>
 80014c6:	0003      	movs	r3, r0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e14f      	b.n	8001780 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4091      	lsls	r1, r2
 80014ea:	000a      	movs	r2, r1
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_GPIO_Init+0x28>
 80014f6:	e140      	b.n	800177a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2203      	movs	r2, #3
 80014fe:	4013      	ands	r3, r2
 8001500:	2b01      	cmp	r3, #1
 8001502:	d005      	beq.n	8001510 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2203      	movs	r2, #3
 800150a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800150c:	2b02      	cmp	r3, #2
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	43da      	mvns	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001546:	2201      	movs	r2, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	2201      	movs	r2, #1
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	4013      	ands	r3, r2
 800157a:	2b03      	cmp	r3, #3
 800157c:	d017      	beq.n	80015ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d123      	bne.n	8001602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	58d3      	ldr	r3, [r2, r3]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	43da      	mvns	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2107      	movs	r1, #7
 80015e6:	400b      	ands	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	409a      	lsls	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2203      	movs	r2, #3
 8001620:	401a      	ands	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	23c0      	movs	r3, #192	; 0xc0
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d100      	bne.n	8001644 <HAL_GPIO_Init+0x174>
 8001642:	e09a      	b.n	800177a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b54      	ldr	r3, [pc, #336]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	4b51      	ldr	r3, [pc, #324]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800165c:	4a4f      	ldr	r2, [pc, #316]	; (800179c <HAL_GPIO_Init+0x2cc>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	589b      	ldr	r3, [r3, r2]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	2390      	movs	r3, #144	; 0x90
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	429a      	cmp	r2, r3
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x1e2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x1de>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x1da>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a42      	ldr	r2, [pc, #264]	; (80017a8 <HAL_GPIO_Init+0x2d8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x1d6>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016b2:	2300      	movs	r3, #0
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	2103      	movs	r1, #3
 80016b8:	400a      	ands	r2, r1
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x2cc>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	4013      	ands	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4013      	ands	r3, r2
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43da      	mvns	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	035b      	lsls	r3, r3, #13
 800173e:	4013      	ands	r3, r2
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	4013      	ands	r3, r2
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	40da      	lsrs	r2, r3
 8001788:	1e13      	subs	r3, r2, #0
 800178a:	d000      	beq.n	800178e <HAL_GPIO_Init+0x2be>
 800178c:	e6a8      	b.n	80014e0 <HAL_GPIO_Init+0x10>
  } 
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b006      	add	sp, #24
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e082      	b.n	80018c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2241      	movs	r2, #65	; 0x41
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	2100      	movs	r1, #0
 80017d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff fca9 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2241      	movs	r2, #65	; 0x41
 80017e2:	2124      	movs	r1, #36	; 0x24
 80017e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	438a      	bics	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4934      	ldr	r1, [pc, #208]	; (80018d0 <HAL_I2C_Init+0x120>)
 8001800:	400a      	ands	r2, r1
 8001802:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4931      	ldr	r1, [pc, #196]	; (80018d4 <HAL_I2C_Init+0x124>)
 8001810:	400a      	ands	r2, r1
 8001812:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0209      	lsls	r1, r1, #8
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	e007      	b.n	800183e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2184      	movs	r1, #132	; 0x84
 8001838:	0209      	lsls	r1, r1, #8
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d104      	bne.n	8001850 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	491f      	ldr	r1, [pc, #124]	; (80018d8 <HAL_I2C_Init+0x128>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	491a      	ldr	r1, [pc, #104]	; (80018d4 <HAL_I2C_Init+0x124>)
 800186c:	400a      	ands	r2, r1
 800186e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	431a      	orrs	r2, r3
 800187a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69d9      	ldr	r1, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2241      	movs	r2, #65	; 0x41
 80018b4:	2120      	movs	r1, #32
 80018b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2242      	movs	r2, #66	; 0x42
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	f0ffffff 	.word	0xf0ffffff
 80018d4:	ffff7fff 	.word	0xffff7fff
 80018d8:	02008000 	.word	0x02008000

080018dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	0008      	movs	r0, r1
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	0019      	movs	r1, r3
 80018ea:	230a      	movs	r3, #10
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	1c02      	adds	r2, r0, #0
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	2308      	movs	r3, #8
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	1c0a      	adds	r2, r1, #0
 80018f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2241      	movs	r2, #65	; 0x41
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b20      	cmp	r3, #32
 8001904:	d000      	beq.n	8001908 <HAL_I2C_Master_Transmit+0x2c>
 8001906:	e0e7      	b.n	8001ad8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	5c9b      	ldrb	r3, [r3, r2]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_I2C_Master_Transmit+0x3a>
 8001912:	2302      	movs	r3, #2
 8001914:	e0e1      	b.n	8001ada <HAL_I2C_Master_Transmit+0x1fe>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800191e:	f7ff fcf5 	bl	800130c <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	0219      	lsls	r1, r3, #8
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2319      	movs	r3, #25
 8001932:	2201      	movs	r2, #1
 8001934:	f000 f8fc 	bl	8001b30 <I2C_WaitOnFlagUntilTimeout>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0cc      	b.n	8001ada <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2241      	movs	r2, #65	; 0x41
 8001944:	2121      	movs	r1, #33	; 0x21
 8001946:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2242      	movs	r2, #66	; 0x42
 800194c:	2110      	movs	r1, #16
 800194e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2208      	movs	r2, #8
 8001960:	18ba      	adds	r2, r7, r2
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d911      	bls.n	800199a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	22ff      	movs	r2, #255	; 0xff
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	b2da      	uxtb	r2, r3
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	045c      	lsls	r4, r3, #17
 8001986:	230a      	movs	r3, #10
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	8819      	ldrh	r1, [r3, #0]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_I2C_Master_Transmit+0x208>)
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	0023      	movs	r3, r4
 8001994:	f000 fa00 	bl	8001d98 <I2C_TransferConfig>
 8001998:	e075      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	049c      	lsls	r4, r3, #18
 80019ae:	230a      	movs	r3, #10
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	8819      	ldrh	r1, [r3, #0]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_I2C_Master_Transmit+0x208>)
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	0023      	movs	r3, r4
 80019bc:	f000 f9ec 	bl	8001d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019c0:	e061      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 f8f0 	bl	8001bae <I2C_WaitOnTXISFlagUntilTimeout>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e081      	b.n	8001ada <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03a      	beq.n	8001a86 <HAL_I2C_Master_Transmit+0x1aa>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d136      	bne.n	8001a86 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	0013      	movs	r3, r2
 8001a22:	2200      	movs	r2, #0
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	f000 f883 	bl	8001b30 <I2C_WaitOnFlagUntilTimeout>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e053      	b.n	8001ada <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2bff      	cmp	r3, #255	; 0xff
 8001a3a:	d911      	bls.n	8001a60 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	045c      	lsls	r4, r3, #17
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	8819      	ldrh	r1, [r3, #0]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	2300      	movs	r3, #0
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	0023      	movs	r3, r4
 8001a5a:	f000 f99d 	bl	8001d98 <I2C_TransferConfig>
 8001a5e:	e012      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	049c      	lsls	r4, r3, #18
 8001a74:	230a      	movs	r3, #10
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	8819      	ldrh	r1, [r3, #0]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	0023      	movs	r3, r4
 8001a82:	f000 f989 	bl	8001d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d198      	bne.n	80019c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f8c8 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e01a      	b.n	8001ada <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <HAL_I2C_Master_Transmit+0x20c>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2241      	movs	r2, #65	; 0x41
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2242      	movs	r2, #66	; 0x42
 8001ac8:	2100      	movs	r1, #0
 8001aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e000      	b.n	8001ada <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
  }
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b007      	add	sp, #28
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	80002000 	.word	0x80002000
 8001ae8:	fe00e800 	.word	0xfe00e800

08001aec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d103      	bne.n	8001b0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d007      	beq.n	8001b28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	619a      	str	r2, [r3, #24]
  }
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b40:	e021      	b.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	d01e      	beq.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b48:	f7ff fbe0 	bl	800130c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d302      	bcc.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d113      	bne.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	2220      	movs	r2, #32
 8001b64:	431a      	orrs	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2241      	movs	r2, #65	; 0x41
 8001b6e:	2120      	movs	r1, #32
 8001b70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2242      	movs	r2, #66	; 0x42
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	425a      	negs	r2, r3
 8001b96:	4153      	adcs	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d0ce      	beq.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}

08001bae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bba:	e02b      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 f86e 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e029      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	d01e      	beq.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7ff fb99 	bl	800130c <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2241      	movs	r2, #65	; 0x41
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2242      	movs	r2, #66	; 0x42
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d1cc      	bne.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c38:	e028      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 f82f 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e026      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7ff fb5d 	bl	800130c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d113      	bne.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	2220      	movs	r2, #32
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2241      	movs	r2, #65	; 0x41
 8001c74:	2120      	movs	r1, #32
 8001c76:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2242      	movs	r2, #66	; 0x42
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2220      	movs	r2, #32
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d1cf      	bne.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d164      	bne.n	8001d88 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	049b      	lsls	r3, r3, #18
 8001cc8:	401a      	ands	r2, r3
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	049b      	lsls	r3, r3, #18
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d02b      	beq.n	8001d2a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	01c9      	lsls	r1, r1, #7
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce4:	e021      	b.n	8001d2a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	d01e      	beq.n	8001d2a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cec:	f7ff fb0e 	bl	800130c <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d302      	bcc.n	8001d02 <I2C_IsAcknowledgeFailed+0x5e>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d113      	bne.n	8001d2a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	2220      	movs	r2, #32
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2241      	movs	r2, #65	; 0x41
 8001d12:	2120      	movs	r1, #32
 8001d14:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2242      	movs	r2, #66	; 0x42
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e02f      	b.n	8001d8a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2220      	movs	r2, #32
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d1d6      	bne.n	8001ce6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff fece 	bl	8001aec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	490e      	ldr	r1, [pc, #56]	; (8001d94 <I2C_IsAcknowledgeFailed+0xf0>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	2204      	movs	r2, #4
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2241      	movs	r2, #65	; 0x41
 8001d70:	2120      	movs	r1, #32
 8001d72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2242      	movs	r2, #66	; 0x42
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	; 0x40
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	fe00e800 	.word	0xfe00e800

08001d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	0008      	movs	r0, r1
 8001da2:	0011      	movs	r1, r2
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	240a      	movs	r4, #10
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	1c02      	adds	r2, r0, #0
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	2009      	movs	r0, #9
 8001db0:	183b      	adds	r3, r7, r0
 8001db2:	1c0a      	adds	r2, r1, #0
 8001db4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	6a3a      	ldr	r2, [r7, #32]
 8001dbe:	0d51      	lsrs	r1, r2, #21
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	00d2      	lsls	r2, r2, #3
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	490e      	ldr	r1, [pc, #56]	; (8001e00 <I2C_TransferConfig+0x68>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	43d2      	mvns	r2, r2
 8001dcc:	401a      	ands	r2, r3
 8001dce:	0011      	movs	r1, r2
 8001dd0:	193b      	adds	r3, r7, r4
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	059b      	lsls	r3, r3, #22
 8001dd6:	0d9a      	lsrs	r2, r3, #22
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	0418      	lsls	r0, r3, #16
 8001dde:	23ff      	movs	r3, #255	; 0xff
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	4003      	ands	r3, r0
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b005      	add	sp, #20
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	03ff63ff 	.word	0x03ff63ff

08001e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2241      	movs	r2, #65	; 0x41
 8001e12:	5c9b      	ldrb	r3, [r3, r2]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d138      	bne.n	8001e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e032      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2240      	movs	r2, #64	; 0x40
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	2124      	movs	r1, #36	; 0x24
 8001e36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	438a      	bics	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4911      	ldr	r1, [pc, #68]	; (8001e98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2241      	movs	r2, #65	; 0x41
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	ffffefff 	.word	0xffffefff

08001e9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2241      	movs	r2, #65	; 0x41
 8001eaa:	5c9b      	ldrb	r3, [r3, r2]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d139      	bne.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	5c9b      	ldrb	r3, [r3, r2]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e033      	b.n	8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2241      	movs	r2, #65	; 0x41
 8001ecc:	2124      	movs	r1, #36	; 0x24
 8001ece:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2101      	movs	r1, #1
 8001edc:	438a      	bics	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2241      	movs	r2, #65	; 0x41
 8001f16:	2120      	movs	r1, #32
 8001f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	2100      	movs	r1, #0
 8001f20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
  }
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	fffff0ff 	.word	0xfffff0ff

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e301      	b.n	800254a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x1e>
 8001f50:	e08d      	b.n	800206e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f52:	4bc3      	ldr	r3, [pc, #780]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	220c      	movs	r2, #12
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00e      	beq.n	8001f7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5e:	4bc0      	ldr	r3, [pc, #768]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x64>
 8001f6a:	4bbd      	ldr	r3, [pc, #756]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	025b      	lsls	r3, r3, #9
 8001f72:	401a      	ands	r2, r3
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10d      	bne.n	8001f98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4bb8      	ldr	r3, [pc, #736]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	029b      	lsls	r3, r3, #10
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x56>
 8001f88:	e070      	b.n	800206c <HAL_RCC_OscConfig+0x138>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d000      	beq.n	8001f94 <HAL_RCC_OscConfig+0x60>
 8001f92:	e06b      	b.n	800206c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e2d8      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x7c>
 8001fa0:	4baf      	ldr	r3, [pc, #700]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4bae      	ldr	r3, [pc, #696]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	0249      	lsls	r1, r1, #9
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e02f      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x9e>
 8001fb8:	4ba9      	ldr	r3, [pc, #676]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4ba8      	ldr	r3, [pc, #672]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	49a9      	ldr	r1, [pc, #676]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4ba6      	ldr	r3, [pc, #664]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4ba5      	ldr	r3, [pc, #660]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	49a7      	ldr	r1, [pc, #668]	; (8002268 <HAL_RCC_OscConfig+0x334>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e01e      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc4>
 8001fda:	4ba1      	ldr	r3, [pc, #644]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4ba0      	ldr	r3, [pc, #640]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	02c9      	lsls	r1, r1, #11
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b9d      	ldr	r3, [pc, #628]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b9c      	ldr	r3, [pc, #624]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
 8001ff8:	4b99      	ldr	r3, [pc, #612]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b98      	ldr	r3, [pc, #608]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	4999      	ldr	r1, [pc, #612]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	4b96      	ldr	r3, [pc, #600]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b95      	ldr	r3, [pc, #596]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800200a:	4997      	ldr	r1, [pc, #604]	; (8002268 <HAL_RCC_OscConfig+0x334>)
 800200c:	400a      	ands	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d014      	beq.n	8002042 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff f978 	bl	800130c <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002022:	f7ff f973 	bl	800130c <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e28a      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	4b8a      	ldr	r3, [pc, #552]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	4013      	ands	r3, r2
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0xee>
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff f963 	bl	800130c <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f95e 	bl	800130c <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e275      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x118>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x146>
 8002078:	e069      	b.n	800214e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800207a:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	220c      	movs	r2, #12
 8002080:	4013      	ands	r3, r2
 8002082:	d00b      	beq.n	800209c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002084:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	220c      	movs	r2, #12
 800208a:	4013      	ands	r3, r2
 800208c:	2b08      	cmp	r3, #8
 800208e:	d11c      	bne.n	80020ca <HAL_RCC_OscConfig+0x196>
 8002090:	4b73      	ldr	r3, [pc, #460]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	4013      	ands	r3, r2
 800209a:	d116      	bne.n	80020ca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e24b      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b6b      	ldr	r3, [pc, #428]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22f8      	movs	r2, #248	; 0xf8
 80020b8:	4393      	bics	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00da      	lsls	r2, r3, #3
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c8:	e041      	b.n	800214e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b62      	ldr	r3, [pc, #392]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	2101      	movs	r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff f915 	bl	800130c <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e8:	f7ff f910 	bl	800130c <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e227      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2202      	movs	r2, #2
 8002100:	4013      	ands	r3, r2
 8002102:	d0f1      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	22f8      	movs	r2, #248	; 0xf8
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00da      	lsls	r2, r3, #3
 8002114:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e018      	b.n	800214e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002122:	2101      	movs	r1, #1
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff f8f0 	bl	800130c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff f8eb 	bl	800130c <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e202      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f1      	bne.n	8002132 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2208      	movs	r2, #8
 8002154:	4013      	ands	r3, r2
 8002156:	d036      	beq.n	80021c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002160:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002166:	2101      	movs	r1, #1
 8002168:	430a      	orrs	r2, r1
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7ff f8ce 	bl	800130c <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7ff f8c9 	bl	800130c <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1e0      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d0f1      	beq.n	8002176 <HAL_RCC_OscConfig+0x242>
 8002192:	e018      	b.n	80021c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800219a:	2101      	movs	r1, #1
 800219c:	438a      	bics	r2, r1
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff f8b4 	bl	800130c <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff f8af 	bl	800130c <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1c6      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d1f1      	bne.n	80021aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2204      	movs	r2, #4
 80021cc:	4013      	ands	r3, r2
 80021ce:	d100      	bne.n	80021d2 <HAL_RCC_OscConfig+0x29e>
 80021d0:	e0b4      	b.n	800233c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	201f      	movs	r0, #31
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	055b      	lsls	r3, r3, #21
 80021e2:	4013      	ands	r3, r2
 80021e4:	d110      	bne.n	8002208 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0549      	lsls	r1, r1, #21
 80021f0:	430a      	orrs	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002202:	183b      	adds	r3, r7, r0
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x338>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d11a      	bne.n	800224a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCC_OscConfig+0x338>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_OscConfig+0x338>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0049      	lsls	r1, r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7ff f873 	bl	800130c <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7ff f86e 	bl	800130c <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e185      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x338>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10e      	bne.n	8002270 <HAL_RCC_OscConfig+0x33c>
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	4b02      	ldr	r3, [pc, #8]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	621a      	str	r2, [r3, #32]
 800225e:	e035      	b.n	80022cc <HAL_RCC_OscConfig+0x398>
 8002260:	40021000 	.word	0x40021000
 8002264:	fffeffff 	.word	0xfffeffff
 8002268:	fffbffff 	.word	0xfffbffff
 800226c:	40007000 	.word	0x40007000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x35e>
 8002278:	4bb6      	ldr	r3, [pc, #728]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	4bb5      	ldr	r3, [pc, #724]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	4bb2      	ldr	r3, [pc, #712]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800228a:	2104      	movs	r1, #4
 800228c:	438a      	bics	r2, r1
 800228e:	621a      	str	r2, [r3, #32]
 8002290:	e01c      	b.n	80022cc <HAL_RCC_OscConfig+0x398>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x380>
 800229a:	4bae      	ldr	r3, [pc, #696]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4bad      	ldr	r3, [pc, #692]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022a0:	2104      	movs	r1, #4
 80022a2:	430a      	orrs	r2, r1
 80022a4:	621a      	str	r2, [r3, #32]
 80022a6:	4bab      	ldr	r3, [pc, #684]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	4baa      	ldr	r3, [pc, #680]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	430a      	orrs	r2, r1
 80022b0:	621a      	str	r2, [r3, #32]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0x398>
 80022b4:	4ba7      	ldr	r3, [pc, #668]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	4ba6      	ldr	r3, [pc, #664]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	621a      	str	r2, [r3, #32]
 80022c0:	4ba4      	ldr	r3, [pc, #656]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	4ba3      	ldr	r3, [pc, #652]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022c6:	2104      	movs	r1, #4
 80022c8:	438a      	bics	r2, r1
 80022ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d014      	beq.n	80022fe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7ff f81a 	bl	800130c <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7ff f815 	bl	800130c <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a9b      	ldr	r2, [pc, #620]	; (8002558 <HAL_RCC_OscConfig+0x624>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e12b      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	4b98      	ldr	r3, [pc, #608]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x3aa>
 80022fc:	e013      	b.n	8002326 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f805 	bl	800130c <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002306:	e009      	b.n	800231c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f7ff f800 	bl	800130c <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	4a91      	ldr	r2, [pc, #580]	; (8002558 <HAL_RCC_OscConfig+0x624>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e116      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b8d      	ldr	r3, [pc, #564]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	2202      	movs	r2, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002326:	231f      	movs	r3, #31
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	4b87      	ldr	r3, [pc, #540]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002336:	4989      	ldr	r1, [pc, #548]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002338:	400a      	ands	r2, r1
 800233a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2210      	movs	r2, #16
 8002342:	4013      	ands	r3, r2
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d12a      	bne.n	80023a4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800234e:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002354:	2104      	movs	r1, #4
 8002356:	430a      	orrs	r2, r1
 8002358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800235a:	4b7e      	ldr	r3, [pc, #504]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800235c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235e:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002360:	2101      	movs	r1, #1
 8002362:	430a      	orrs	r2, r1
 8002364:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe ffd1 	bl	800130c <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002370:	f7fe ffcc 	bl	800130c <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0e3      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d0f1      	beq.n	8002370 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800238c:	4b71      	ldr	r3, [pc, #452]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	22f8      	movs	r2, #248	; 0xf8
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	00da      	lsls	r2, r3, #3
 800239c:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
 80023a2:	e034      	b.n	800240e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	3305      	adds	r3, #5
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023ac:	4b69      	ldr	r3, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b0:	4b68      	ldr	r3, [pc, #416]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023b2:	2104      	movs	r1, #4
 80023b4:	438a      	bics	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023bc:	22f8      	movs	r2, #248	; 0xf8
 80023be:	4393      	bics	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	00da      	lsls	r2, r3, #3
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
 80023ce:	e01e      	b.n	800240e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023d0:	4b60      	ldr	r3, [pc, #384]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d4:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023d6:	2104      	movs	r1, #4
 80023d8:	430a      	orrs	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023dc:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e0:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe ff90 	bl	800130c <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023f2:	f7fe ff8b 	bl	800130c <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0a2      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d1f1      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <HAL_RCC_OscConfig+0x4e4>
 8002416:	e097      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	220c      	movs	r2, #12
 800241e:	4013      	ands	r3, r2
 8002420:	2b08      	cmp	r3, #8
 8002422:	d100      	bne.n	8002426 <HAL_RCC_OscConfig+0x4f2>
 8002424:	e06b      	b.n	80024fe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d14c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002434:	494a      	ldr	r1, [pc, #296]	; (8002560 <HAL_RCC_OscConfig+0x62c>)
 8002436:	400a      	ands	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe ff67 	bl	800130c <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe ff62 	bl	800130c <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e079      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	049b      	lsls	r3, r3, #18
 800245e:	4013      	ands	r3, r2
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	220f      	movs	r2, #15
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002472:	430a      	orrs	r2, r1
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_RCC_OscConfig+0x630>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	431a      	orrs	r2, r3
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0449      	lsls	r1, r1, #17
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe ff35 	bl	800130c <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe ff30 	bl	800130c <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e047      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	049b      	lsls	r3, r3, #18
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x574>
 80024c6:	e03f      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024ce:	4924      	ldr	r1, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x62c>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe ff1a 	bl	800130c <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe ff15 	bl	800130c <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e02c      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x5aa>
 80024fc:	e024      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e01f      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	429a      	cmp	r2, r3
 8002524:	d10e      	bne.n	8002544 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	220f      	movs	r2, #15
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	23f0      	movs	r3, #240	; 0xf0
 8002538:	039b      	lsls	r3, r3, #14
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b008      	add	sp, #32
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40021000 	.word	0x40021000
 8002558:	00001388 	.word	0x00001388
 800255c:	efffffff 	.word	0xefffffff
 8002560:	feffffff 	.word	0xfeffffff
 8002564:	ffc2ffff 	.word	0xffc2ffff

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b3      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d911      	bls.n	80025ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b55      	ldr	r3, [pc, #340]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e09a      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d015      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d006      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025c8:	21e0      	movs	r1, #224	; 0xe0
 80025ca:	00c9      	lsls	r1, r1, #3
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	22f0      	movs	r2, #240	; 0xf0
 80025d6:	4393      	bics	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4013      	ands	r3, r2
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d114      	bne.n	800262c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06e      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	049b      	lsls	r3, r3, #18
 8002616:	4013      	ands	r3, r2
 8002618:	d108      	bne.n	800262c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e062      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e05b      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe fe64 	bl	800130c <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e009      	b.n	800265e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe fe5f 	bl	800130c <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_RCC_ClockConfig+0x18c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e042      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	220c      	movs	r2, #12
 8002664:	401a      	ands	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1ec      	bne.n	800264a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d211      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	4393      	bics	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e020      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2204      	movs	r2, #4
 80026a8:	4013      	ands	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_RCC_ClockConfig+0x190>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c0:	f000 f820 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c4:	0001      	movs	r1, r0
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	220f      	movs	r2, #15
 80026ce:	4013      	ands	r3, r2
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x194>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	000a      	movs	r2, r1
 80026d6:	40da      	lsrs	r2, r3
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x198>)
 80026da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026dc:	2003      	movs	r0, #3
 80026de:	f7fe fdcf 	bl	8001280 <HAL_InitTick>
  
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	00001388 	.word	0x00001388
 80026f8:	fffff8ff 	.word	0xfffff8ff
 80026fc:	08002d40 	.word	0x08002d40
 8002700:	2000001c 	.word	0x2000001c

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08f      	sub	sp, #60	; 0x3c
 8002708:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800270a:	2314      	movs	r3, #20
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002712:	c313      	stmia	r3!, {r0, r1, r4}
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800271c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800271e:	c313      	stmia	r3!, {r0, r1, r4}
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002728:	2300      	movs	r3, #0
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	220c      	movs	r2, #12
 8002742:	4013      	ands	r3, r2
 8002744:	2b04      	cmp	r3, #4
 8002746:	d002      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x4a>
 8002748:	2b08      	cmp	r3, #8
 800274a:	d003      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x50>
 800274c:	e02d      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002752:	e02d      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	220f      	movs	r2, #15
 800275a:	4013      	ands	r3, r2
 800275c:	2214      	movs	r2, #20
 800275e:	18ba      	adds	r2, r7, r2
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	220f      	movs	r2, #15
 800276a:	4013      	ands	r3, r2
 800276c:	1d3a      	adds	r2, r7, #4
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	025b      	lsls	r3, r3, #9
 8002778:	4013      	ands	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800277c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800277e:	4812      	ldr	r0, [pc, #72]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002780:	f7fd fcc2 	bl	8000108 <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	4353      	muls	r3, r2
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
 800278e:	e009      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002792:	000a      	movs	r2, r1
 8002794:	0152      	lsls	r2, r2, #5
 8002796:	1a52      	subs	r2, r2, r1
 8002798:	0193      	lsls	r3, r2, #6
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	185b      	adds	r3, r3, r1
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027a8:	e002      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b00f      	add	sp, #60	; 0x3c
 80027b8:	bd90      	pop	{r4, r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	08002aa0 	.word	0x08002aa0
 80027c0:	08002ab0 	.word	0x08002ab0
 80027c4:	40021000 	.word	0x40021000
 80027c8:	007a1200 	.word	0x007a1200

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	025b      	lsls	r3, r3, #9
 80027e4:	4013      	ands	r3, r2
 80027e6:	d100      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027e8:	e08e      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2017      	movs	r0, #23
 80027ec:	183b      	adds	r3, r7, r0
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b57      	ldr	r3, [pc, #348]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	055b      	lsls	r3, r3, #21
 80027fa:	4013      	ands	r3, r2
 80027fc:	d110      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b54      	ldr	r3, [pc, #336]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0549      	lsls	r1, r1, #21
 8002808:	430a      	orrs	r2, r1
 800280a:	61da      	str	r2, [r3, #28]
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	055b      	lsls	r3, r3, #21
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	183b      	adds	r3, r7, r0
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4013      	ands	r3, r2
 800282a:	d11a      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282c:	4b49      	ldr	r3, [pc, #292]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b48      	ldr	r3, [pc, #288]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0049      	lsls	r1, r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe fd67 	bl	800130c <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	e008      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002844:	f7fe fd62 	bl	800130c <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e077      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002856:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4013      	ands	r3, r2
 8002860:	d0f0      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	23c0      	movs	r3, #192	; 0xc0
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d034      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	23c0      	movs	r3, #192	; 0xc0
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4013      	ands	r3, r2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d02c      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800288a:	4013      	ands	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	0249      	lsls	r1, r1, #9
 8002898:	430a      	orrs	r2, r1
 800289a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028a2:	492e      	ldr	r1, [pc, #184]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80028a4:	400a      	ands	r2, r1
 80028a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe fd29 	bl	800130c <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e009      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fd24 	bl	800130c <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	4a25      	ldr	r2, [pc, #148]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e038      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	2202      	movs	r2, #2
 80028da:	4013      	ands	r3, r2
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f2:	2317      	movs	r3, #23
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002902:	4918      	ldr	r1, [pc, #96]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002904:	400a      	ands	r2, r1
 8002906:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	2203      	movs	r2, #3
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002922:	430a      	orrs	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2220      	movs	r2, #32
 800292c:	4013      	ands	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	2210      	movs	r2, #16
 8002936:	4393      	bics	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002940:	430a      	orrs	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b006      	add	sp, #24
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	fffffcff 	.word	0xfffffcff
 800295c:	fffeffff 	.word	0xfffeffff
 8002960:	00001388 	.word	0x00001388
 8002964:	efffffff 	.word	0xefffffff

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4d0c      	ldr	r5, [pc, #48]	; (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	2600      	movs	r6, #0
 800297a:	f000 f821 	bl	80029c0 <_init>
 800297e:	4d0a      	ldr	r5, [pc, #40]	; (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	00b3      	lsls	r3, r6, #2
 800298e:	58eb      	ldr	r3, [r5, r3]
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	00b3      	lsls	r3, r6, #2
 8002998:	58eb      	ldr	r3, [r5, r3]
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08002d50 	.word	0x08002d50
 80029a4:	08002d50 	.word	0x08002d50
 80029a8:	08002d50 	.word	0x08002d50
 80029ac:	08002d54 	.word	0x08002d54

080029b0 <memset>:
 80029b0:	0003      	movs	r3, r0
 80029b2:	1882      	adds	r2, r0, r2
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	7019      	strb	r1, [r3, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
